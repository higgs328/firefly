import{a as s}from"./chunk-MIS6QMFE.js";import{b as m}from"./chunk-BAEF3CT6.js";import{a}from"./chunk-QGVBCWUY.js";import{e as i}from"./chunk-NFIPKH6V.js";import{l}from"./chunk-5QEXLALV.js";import{g as e}from"./chunk-XRGPJ3QY.js";var y=m()({naturalLog:"natural-log",squareRoot:"square-root",percentOfTotal:"percent-of-total",log:"log",field:"field"}),p="percent-of-total",u="field",w=z=>{let o=class extends z{constructor(){super(...arguments),this.normalizationField=null,this.normalizationMaxValue=null,this.normalizationMinValue=null,this.normalizationTotal=null}get normalizationType(){let t=this._get("normalizationType"),r=!!this.normalizationField,n=this.normalizationTotal!=null;return r||n?(t=r&&u||n&&p||null,r&&n&&e.getLogger(this).warn("warning: both normalizationField and normalizationTotal are set!")):t!==u&&t!==p||(t=null),t}set normalizationType(t){this._set("normalizationType",t)}};return a([i({type:String,json:{name:"parameters.normalizationField",write:!0}})],o.prototype,"normalizationField",void 0),a([i({type:Number,json:{name:"parameters.normalizationMaxValue",write:!0}})],o.prototype,"normalizationMaxValue",void 0),a([i({type:Number,json:{name:"parameters.normalizationMinValue",write:!0}})],o.prototype,"normalizationMinValue",void 0),a([i({type:Number,json:{name:"parameters.normalizationTotal",write:!0}})],o.prototype,"normalizationTotal",void 0),a([s(y,{name:"parameters.normalizationType"})],o.prototype,"normalizationType",null),o=a([l("esri.rest.support.NormalizationBinParametersMixin")],o),o};export{y as a,w as b};
