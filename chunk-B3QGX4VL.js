import{a as b}from"./chunk-E424TX4V.js";import{f as y}from"./chunk-ZC6EBRE4.js";import{h as d}from"./chunk-RNC4P66O.js";import{m as h}from"./chunk-ZQIC5NFT.js";import{a as c}from"./chunk-XKIFGPJO.js";import{f as u}from"./chunk-CCJU4DSH.js";import{a as i}from"./chunk-QGVBCWUY.js";import{e as a}from"./chunk-NFIPKH6V.js";import{l as f}from"./chunk-5QEXLALV.js";var p,v={base:c,key:"type",typeMap:{extent:h,polygon:d}},o=p=class extends u{constructor(e){super(e),this.areaOfInterest=null,this.subsetDefinitions=null}get dimensions(){let{subsetDefinitions:e}=this;if(e==null||e.length===0)return[];let n=new Map;e.forEach(t=>{if(!t.dimensionName)return;let l,m;if(Array.isArray(t.values[0])){let s=t.values;l=s[0][0],m=s[t.values.length-1][1]}else{let s=t.values;l=s[0],m=s[t.values.length-1]}if(n.has(t.dimensionName)){let s=n.get(t.dimensionName);s[0]=Math.min(l,s[0]),s[1]=Math.max(m,s[1])}else n.set(t.dimensionName,[l,m])});let r=[];for(let t of n)r.push({name:t[0],extent:t[1]});return r}get variables(){let{subsetDefinitions:e}=this;if(e==null||e.length===0)return[];let n=new Set;return e.forEach(r=>{r.variableName&&n.add(r.variableName)}),[...n]}clone(){let e=this.subsetDefinitions?.map(r=>r.clone()),n=this.areaOfInterest?this.areaOfInterest.clone():this.areaOfInterest;return new p({areaOfInterest:n,subsetDefinitions:e})}};i([a({types:v,json:{read:y,write:!0}})],o.prototype,"areaOfInterest",void 0),i([a({readOnly:!0})],o.prototype,"dimensions",null),i([a({readOnly:!0})],o.prototype,"variables",null),i([a({type:[b],json:{write:!0}})],o.prototype,"subsetDefinitions",void 0),o=p=i([f("esri.layers.support.MultidimensionalSubset")],o);var k=o;export{k as a};
