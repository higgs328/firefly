import{a as c}from"./chunk-NFRBKTFJ.js";import{a as i}from"./chunk-BAXUDVHK.js";import{c as u}from"./chunk-BMYVPMAK.js";import{f as y,g as l}from"./chunk-ZC6EBRE4.js";import{a as n}from"./chunk-CX5IFQZJ.js";import{a as r}from"./chunk-QGVBCWUY.js";import{e as s}from"./chunk-NFIPKH6V.js";import{l as a}from"./chunk-5QEXLALV.js";import{b as m}from"./chunk-2LI2GKBQ.js";var p,e=p=class extends c{constructor(){super(...arguments),this.type="point",this.geometry=null,this.is3D=!1}writeGeometry(t,o,f){t!=null&&(o.geometryType=l(t),o[f]=t.toJSON())}get measureOperation(){let{is3D:t,geometry:o}=this;return o.type==="point"?t?"point-3D":"point":t?"centroid-3D":"centroid"}clone(){return new p(m({geometry:this.geometry,is3D:this.is3D,mosaicRule:this.mosaicRule,pixelSize:this.pixelSize,raster:this.raster}))}};r([s({types:u,json:{name:"fromGeometry",read:y}})],e.prototype,"geometry",void 0),r([n("geometry")],e.prototype,"writeGeometry",null),r([s({type:i.apiValues,json:{read:i.read,write:i.write}})],e.prototype,"measureOperation",null),r([s({json:{read:!0}})],e.prototype,"is3D",void 0),e=p=r([a("esri.rest.support.ImagePointParameters")],e);var G=e;export{G as a};
