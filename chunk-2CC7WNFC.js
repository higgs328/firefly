import{c as g}from"./chunk-G7KCDLNH.js";import{a as d}from"./chunk-KC3MEJHL.js";import{a as w}from"./chunk-JP3UDQL6.js";import{m}from"./chunk-ZQIC5NFT.js";import{c as v}from"./chunk-VIEK2X23.js";import{a as c}from"./chunk-7F5DJLJT.js";import{f as l}from"./chunk-CCJU4DSH.js";import{a as t}from"./chunk-QGVBCWUY.js";import{e}from"./chunk-NFIPKH6V.js";import{l as a}from"./chunk-5QEXLALV.js";import{b as o}from"./chunk-2LI2GKBQ.js";var y,r=y=class extends l{constructor(){super(...arguments),this.blockWidth=void 0,this.blockHeight=void 0,this.compression=null,this.origin=null,this.firstPyramidLevel=null,this.maximumPyramidLevel=null,this.pyramidScalingFactor=2,this.pyramidBlockWidth=null,this.pyramidBlockHeight=null,this.isVirtualTileInfo=!1,this.tileInfo=null,this.transposeInfo=null,this.blockBoundary=null}clone(){return new y({blockWidth:this.blockWidth,blockHeight:this.blockHeight,compression:this.compression,origin:o(this.origin),firstPyramidLevel:this.firstPyramidLevel,maximumPyramidLevel:this.maximumPyramidLevel,pyramidResolutions:o(this.pyramidResolutions),pyramidScalingFactor:this.pyramidScalingFactor,pyramidBlockWidth:this.pyramidBlockWidth,pyramidBlockHeight:this.pyramidBlockHeight,isVirtualTileInfo:this.isVirtualTileInfo,tileInfo:o(this.tileInfo),transposeInfo:o(this.transposeInfo),blockBoundary:o(this.blockBoundary)})}};t([e({type:Number,json:{write:!0}})],r.prototype,"blockWidth",void 0),t([e({type:Number,json:{write:!0}})],r.prototype,"blockHeight",void 0),t([e({type:String,json:{write:!0}})],r.prototype,"compression",void 0),t([e({type:v,json:{write:!0}})],r.prototype,"origin",void 0),t([e({type:Number,json:{write:!0}})],r.prototype,"firstPyramidLevel",void 0),t([e({type:Number,json:{write:!0}})],r.prototype,"maximumPyramidLevel",void 0),t([e({json:{write:!0}})],r.prototype,"pyramidResolutions",void 0),t([e({type:Number,json:{write:!0}})],r.prototype,"pyramidScalingFactor",void 0),t([e({type:Number,json:{write:!0}})],r.prototype,"pyramidBlockWidth",void 0),t([e({type:Number,json:{write:!0}})],r.prototype,"pyramidBlockHeight",void 0),t([e({type:Boolean,json:{write:!0}})],r.prototype,"isVirtualTileInfo",void 0),t([e({json:{write:!0}})],r.prototype,"tileInfo",void 0),t([e()],r.prototype,"transposeInfo",void 0),t([e({json:{write:!0}})],r.prototype,"blockBoundary",void 0),r=y=t([a("esri.layers.support.RasterStorageInfo")],r);var b=r;var u,i=u=class extends l{constructor(s){super(s),this.attributeTable=null,this.bandCount=null,this.colormap=null,this.extent=null,this.format=void 0,this.height=null,this.width=null,this.histograms=null,this.keyProperties={},this.multidimensionalInfo=null,this.noDataValue=null,this.pixelSize=null,this.pixelType=null,this.isPseudoSpatialReference=!1,this.spatialReference=null,this.statistics=null,this.storageInfo=null,this.transform=null}get bandInfos(){let s=this.keyProperties.BandProperties,{bandCount:f}=this;if(!s?.length||s.length<f){let n=[];for(let h=1;h<=f;h++)n.push(new d({name:"band_"+h}));return n}let p=s.map(n=>d.fromJSON(n));for(let n=0;n<p.length;n++)p[n].name=p[n].name||"band_"+(n+1);return p}get dataType(){let s=this.keyProperties?.DataType?.toLowerCase()??"generic";return s==="stdtime"?"standard-time":s}get nativeExtent(){return this._get("nativeExtent")||this.extent}set nativeExtent(s){s&&this._set("nativeExtent",s)}get nativePixelSize(){if(this.transform==null||!this.transform.affectsPixelSize)return this.pixelSize;let s=this.nativeExtent;return{x:s.width/this.width,y:s.height/this.height}}get hasMultidimensionalTranspose(){return!!this.storageInfo?.transposeInfo}get sensorInfo(){if(this.keyProperties?.SensorName)return w.fromJSON(this.keyProperties)}clone(){return new u({attributeTable:o(this.attributeTable),bandCount:this.bandCount,colormap:o(this.colormap),extent:o(this.extent),format:this.format,height:this.height,width:this.width,histograms:o(this.histograms),keyProperties:o(this.keyProperties),multidimensionalInfo:o(this.multidimensionalInfo),noDataValue:this.noDataValue,pixelSize:o(this.pixelSize),pixelType:this.pixelType,isPseudoSpatialReference:this.isPseudoSpatialReference,spatialReference:o(this.spatialReference),statistics:o(this.statistics),storageInfo:o(this.storageInfo),transform:o(this.transform)})}};t([e({json:{write:!0}})],i.prototype,"attributeTable",void 0),t([e({json:{write:!0}})],i.prototype,"bandCount",void 0),t([e({readOnly:!0})],i.prototype,"bandInfos",null),t([e({json:{write:!0}})],i.prototype,"colormap",void 0),t([e({type:String,readOnly:!0})],i.prototype,"dataType",null),t([e({type:m,json:{write:!0}})],i.prototype,"extent",void 0),t([e({type:m,json:{write:!0}})],i.prototype,"nativeExtent",null),t([e({json:{write:!0}})],i.prototype,"nativePixelSize",null),t([e({json:{write:!0}})],i.prototype,"format",void 0),t([e({json:{write:!0}})],i.prototype,"height",void 0),t([e({json:{write:!0}})],i.prototype,"width",void 0),t([e({json:{write:!0}})],i.prototype,"hasMultidimensionalTranspose",null),t([e({json:{write:!0}})],i.prototype,"histograms",void 0),t([e({json:{write:!0}})],i.prototype,"keyProperties",void 0),t([e({json:{write:!0}})],i.prototype,"multidimensionalInfo",void 0),t([e({json:{write:!0}})],i.prototype,"noDataValue",void 0),t([e({json:{write:!0}})],i.prototype,"pixelSize",void 0),t([e({type:g.apiValues,json:{write:!0}})],i.prototype,"pixelType",void 0),t([e()],i.prototype,"isPseudoSpatialReference",void 0),t([e({readOnly:!0})],i.prototype,"sensorInfo",null),t([e({type:c,json:{write:!0}})],i.prototype,"spatialReference",void 0),t([e({json:{write:!0}})],i.prototype,"statistics",void 0),t([e({type:b,json:{write:!0}})],i.prototype,"storageInfo",void 0),t([e({json:{write:!0}})],i.prototype,"transform",void 0),i=u=t([a("esri.layers.support.RasterInfo")],i);var K=i;export{b as a,K as b};
