import{a as I}from"./chunk-L6LNCKFB.js";import{a as H}from"./chunk-EIFP2BIJ.js";import{d as w}from"./chunk-H2NTHPNN.js";import{a as S,b as j}from"./chunk-LORHDXEB.js";import{j as G}from"./chunk-DA3SDKGO.js";import{b as E,i as y}from"./chunk-EQZWYK27.js";import{m as C}from"./chunk-ZQIC5NFT.js";import{a as q,k as D}from"./chunk-TG45K3WR.js";import{b as P}from"./chunk-ACP3S2CH.js";import{a as s}from"./chunk-QGVBCWUY.js";import{e as u}from"./chunk-NFIPKH6V.js";import{l as A}from"./chunk-5QEXLALV.js";import{f as V}from"./chunk-VTHXE323.js";var O=P.ofType(I),i=class extends H{constructor(e){super(e),this.type="viewshed",this._extent=null}initialize(){this.addHandles(q(()=>this._computeExtent(),e=>{e.pending==null&&(this._extent=e.extent)},D))}get viewsheds(){return this._get("viewsheds")||new O}set viewsheds(e){this._set("viewsheds",S(e,this.viewsheds,O))}get spatialReference(){for(let e of this.viewsheds)if(e.observer!=null)return e.observer.spatialReference;return null}get extent(){return this._extent}get requiredPropertiesForEditing(){return this.viewsheds.items.map(({observer:e})=>e)}waitComputeExtent(){return V(this,null,function*(){let e=this._computeExtent();e.pending!=null&&(yield e.pending)})}_computeExtent(){let{spatialReference:e}=this;if(e==null)return{pending:null,extent:null};let n=this.viewsheds.filter(t=>t.observer!=null),h=n.map(t=>t.observer).toArray(),o=G(h,e);return o.pending!=null?{pending:o.pending,extent:null}:{pending:null,extent:o.geometries.map((t,l)=>{let v=n.at(l);return t!=null&&v!=null?this._computeViewshedExtent(this.viewsheds.at(l),t):null}).filter(t=>t!=null).reduce((t,l)=>U(t,l),null)}}_computeViewshedExtent(e,n){let{farDistance:h,heading:o,tilt:t,horizontalFieldOfView:l,verticalFieldOfView:v}=e,{spatialReference:R}=n,g=l/2,_=v/2,b=h/R.metersPerUnit,N=[w.normalize(o-g),o,w.normalize(o+g)],a=C.fromPoint(n),f=d=>{let p=N.map(r=>w.normalize(r-d));if(p[0]>p[2]||l===360)return b;let m=p.map(r=>Math.abs(r>180?360-r:r)).reduce((r,x)=>r>x?x:r);return m>90?0:b*Math.cos(y(m))};a.xmax+=f(90),a.xmin-=f(-90),a.ymax+=f(0),a.ymin-=f(180);let c=n.z;if(c!=null){let d=c,p=c,m=t-90,r=E(m+_,-90,90),x=E(m-_,-90,90),z=R?.isGeographic?h:b;d+=z*M(r),p+=z*M(x);let T=L(_)*z,F=M(m)*T*(1-L(g));t<90&&(d-=F),t>90&&(p-=F),a.zmax=Math.max(d,c),a.zmin=Math.min(p,c)}return a}clear(){this.viewsheds.removeAll()}};function U(e,n){return e==null?n:n==null?e:e.union(n)}function L(e){return Math.cos(y(e))}function M(e){return Math.sin(y(e))}s([u({type:["viewshed"]})],i.prototype,"type",void 0),s([u({cast:j,type:O,nonNullable:!0})],i.prototype,"viewsheds",null),s([u({readOnly:!0})],i.prototype,"spatialReference",null),s([u()],i.prototype,"_extent",void 0),s([u({readOnly:!0})],i.prototype,"extent",null),s([u({readOnly:!0})],i.prototype,"requiredPropertiesForEditing",null),i=s([A("esri.analysis.ViewshedAnalysis")],i);var se=i;export{se as a};
