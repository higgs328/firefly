import{a as C,b as O,c as S,d as j}from"./chunk-QUZEX4CN.js";import{m as i,o as p,p as u,q as o,r as a}from"./chunk-ITDLEL4J.js";import{a as T}from"./chunk-LAX5536Z.js";import{c as g}from"./chunk-N3HRYLNW.js";import{a as f}from"./chunk-DO7UF2F2.js";import{a as h}from"./chunk-3JGYBNJA.js";import{c}from"./chunk-VIEK2X23.js";import{a as b}from"./chunk-PEW2PLAN.js";import{a as y}from"./chunk-CX5IFQZJ.js";import{f as m}from"./chunk-CCJU4DSH.js";import{a as r}from"./chunk-QGVBCWUY.js";import{e as s}from"./chunk-NFIPKH6V.js";import{l as n}from"./chunk-5QEXLALV.js";var d,t=d=class extends h.ClonableMixin(m){constructor(e){super(e),this.addedCost=null,this.barrierType=null,this.costs=null,this.curbApproach=null,this.fullEdge=null,this.geometry=null,this.name=null,this.objectId=null,this.popupTemplate=null,this.sideOfEdge=null,this.sourceId=null,this.sourceOid=null,this.status=null,this.symbol=null,this.type="point-barrier"}readCosts(e,l){return C(l.attributes,"Attr_")}writeCosts(e,l){O(e,l,"Attr_")}static fromGraphic(e){return new d({addedCost:e.attributes.AddedCost??null,barrierType:e.attributes.BarrierType!=null?o.fromJSON(e.attributes.BarrierType):null,costs:e.attributes.Costs!=null?S(JSON.parse(e.attributes.Costs)):null,curbApproach:e.attributes.CurbApproach!=null?i.fromJSON(e.attributes.CurbApproach):null,fullEdge:e.attributes.FullEdge!=null?a.fromJSON(e.attributes.FullEdge):null,geometry:e.geometry,name:e.attributes.Name??null,objectId:e.attributes.ObjectID??e.attributes.__OBJECTID,popupTemplate:e.popupTemplate,status:e.attributes.Status!=null?p.fromJSON(e.attributes.Status):null,symbol:e.symbol})}toGraphic(){let e={ObjectID:this.objectId,AddedCost:this.addedCost,BarrierType:this.barrierType!=null?o.toJSON(this.barrierType):null,Costs:this.costs!=null?JSON.stringify(j(this.costs)):null,CurbApproach:this.curbApproach!=null?i.toJSON(this.curbApproach):null,FullEdge:this.fullEdge!=null?a.toJSON(this.fullEdge):null,Name:this.name,Status:this.status!=null?p.toJSON(this.status):null};return new T({geometry:this.geometry,attributes:e,symbol:this.symbol,popupTemplate:this.popupTemplate})}};t.fields=[{name:"ObjectID",alias:"ObjectID",type:"esriFieldTypeOID"},{name:"AddedCost",alias:"Added Cost",type:"esriFieldTypeDouble"},{name:"BarrierType",alias:"Barrier Type",type:"esriFieldTypeInteger"},{name:"Costs",alias:"Costs",type:"esriFieldTypeString"},{name:"CurbApproach",alias:"Curb Approach",type:"esriFieldTypeInteger"},{name:"FullEdge",alias:"Full Edge",type:"esriFieldTypeInteger"},{name:"Name",alias:"Name",type:"esriFieldTypeString"},{name:"Status",alias:"Status",type:"esriFieldTypeInteger"}],r([s()],t.prototype,"addedCost",void 0),r([s({type:o.apiValues,json:{name:"attributes.BarrierType",read:{reader:o.read},write:{writer:o.write}}})],t.prototype,"barrierType",void 0),r([s()],t.prototype,"costs",void 0),r([b("costs",["attributes"])],t.prototype,"readCosts",null),r([y("costs")],t.prototype,"writeCosts",null),r([s({type:i.apiValues,json:{read:{source:"attributes.CurbApproach",reader:i.read}}})],t.prototype,"curbApproach",void 0),r([s({type:a.apiValues,json:{name:"attributes.FullEdge",read:{reader:a.read},write:{writer:a.write}}})],t.prototype,"fullEdge",void 0),r([s({type:c,json:{write:!0}})],t.prototype,"geometry",void 0),r([s({json:{name:"attributes.Name"}})],t.prototype,"name",void 0),r([s({json:{name:"attributes.ObjectID"}})],t.prototype,"objectId",void 0),r([s({type:f})],t.prototype,"popupTemplate",void 0),r([s({type:u.apiValues,json:{read:{source:"attributes.SideOfEdge",reader:u.read}}})],t.prototype,"sideOfEdge",void 0),r([s({json:{read:{source:"attributes.SourceID"}}})],t.prototype,"sourceId",void 0),r([s({json:{read:{source:"attributes.SourceOID"}}})],t.prototype,"sourceOid",void 0),r([s({type:p.apiValues,json:{read:{source:"attributes.Status",reader:p.read}}})],t.prototype,"status",void 0),r([s({types:g})],t.prototype,"symbol",void 0),r([s({readOnly:!0,json:{read:!1}})],t.prototype,"type",void 0),t=d=r([n("esri.rest.support.PointBarrier")],t);var K=t;export{K as a};
