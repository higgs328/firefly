import{a as H,b as q}from"./chunk-NOFBQO2U.js";import{a as Y}from"./chunk-MR7TSAP2.js";import{c as j,d as B,e as D,h as U,i as W,j as z,k,m as G}from"./chunk-4QUJ4QFY.js";import{a as y}from"./chunk-KDWL3WU7.js";import{a as v}from"./chunk-3YHPJJNR.js";import{c as A,d as E}from"./chunk-GG4LHW7G.js";import{a as d}from"./chunk-WDTJILD4.js";import{a as x}from"./chunk-HCW4M77K.js";import{b as M}from"./chunk-H4IF7PQO.js";import{a as J}from"./chunk-QKVTMI24.js";import{a as $}from"./chunk-GGYZRKBV.js";import{a as L}from"./chunk-37PSR6DC.js";import{a as C}from"./chunk-P4JHTV62.js";import{a as O}from"./chunk-H25DKJGS.js";import{e as V}from"./chunk-PBAMEKFE.js";import{a as N}from"./chunk-DO7UF2F2.js";import{a as T}from"./chunk-3JGYBNJA.js";import{a as g}from"./chunk-E7AX56GD.js";import{b}from"./chunk-2TX472ZB.js";import{c as P}from"./chunk-7QNKS2X6.js";import{a as I}from"./chunk-VCCMJ6BV.js";import{a as K}from"./chunk-QK56OQGR.js";import{a as _}from"./chunk-TG45K3WR.js";import{a as n}from"./chunk-QGVBCWUY.js";import{e as l}from"./chunk-NFIPKH6V.js";import{l as S}from"./chunk-5QEXLALV.js";import{i as F}from"./chunk-P6QFA5MM.js";import{K as w,s as R}from"./chunk-4PTIEWMT.js";import{b as m}from"./chunk-YOFFGXOB.js";import{g as f}from"./chunk-XRGPJ3QY.js";import{a as c,b as u,f as p}from"./chunk-VTHXE323.js";var o=class extends P(I($(L(Y(J(q(M(x(b(O(T.ClonableMixin(K)))))))))))){constructor(...e){super(...e),this._primaryRasters=[],this.legendEnabled=!0,this.isReference=null,this.listMode="show",this.sourceJSON=null,this.version=null,this.type="imagery-tile",this.operationalLayerType="ArcGISTiledImageServiceLayer",this.popupEnabled=!0,this.popupTemplate=null,this.fields=null,this.source=void 0,this._debouncedSaveOperations=w((t,r,s)=>p(this,null,function*(){let{save:i,saveAs:a}=yield import("./chunk-TN6T6RUB.js");switch(t){case d.SAVE:return i(this,r);case d.SAVE_AS:return a(this,s,r)}}))}normalizeCtorArgs(e,t){return typeof e=="string"?c({url:e},t):e}load(e){let t=e!=null?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Image Service"]},e).catch(R).then(()=>this._openRaster(t))),Promise.resolve(this)}get defaultPopupTemplate(){return this.createPopupTemplate()}get rasterFields(){let e=[B("Pixel Value"),D("Raw Pixel Value")],t=this.raster?.rasterInfo??this.serviceRasterInfo,r=t?.attributeTable;if(r){let a=z(r);e.push(...a)}let s=t?.dataType,i=t?.multidimensionalInfo;if((s==="vector-magdir"||s==="vector-uv")&&i!=null){let a=i.variables[0].unit?.trim(),h=U(a),Q=W();e.push(h,Q)}if(i){let a=k(i);e.push(...a)}return e}createPopupTemplate(e){let{rasterFields:t}=this,r=e?.visibleFieldNames??new Set(t.map(({name:a})=>a).filter(a=>a!==j.rawServicePixelValue)),s=C({fields:t,title:this.title},u(c({},e),{visibleFieldNames:r})),{rasterInfo:i}=this.raster;return s?.fieldInfos&&i&&G(s.fieldInfos,i),s}generateRasterInfo(e,t){return p(this,null,function*(){if(e=F(v,e),yield this.load(),!e||e.functionName?.toLowerCase()==="none")return this.serviceRasterInfo;try{let{rasterInfo:r}=yield this._openFunctionRaster(e,t);return r}catch(r){throw r instanceof m?r:new m("imagery-tile-layer","the given raster function is not supported")}})}save(e){return p(this,null,function*(){return this._debouncedSaveOperations(d.SAVE,e)})}saveAs(e,t){return p(this,null,function*(){return this._debouncedSaveOperations(d.SAVE_AS,t,e)})}write(e,t){let r=this._primaryRasters[0]??this.raster;if(this.loaded?r.datasetFormat==="RasterTileServer"&&(r.tileType==="Raster"||r.tileType==="Map"):this.url&&/\/ImageServer(\/|\/?$)/i.test(this.url))return super.write(e,t);if(t?.messages){let s=`${t.origin}/${t.layerContainerType||"operational-layers"}`;t.messages.push(new m("layer:unsupported",`Layers (${this.title}, ${this.id}) of type '${this.declaredClass}' are not supported in the context of '${s}'`,{layer:this}))}return null}_openRaster(e){return p(this,null,function*(){let t=!1;if(this.raster)yield this._openFromRaster(this.raster,e),t=this.raster.datasetFormat==="Function",!t&&this.rasterFunction&&(this._primaryRasters=[this.raster],yield this._initializeWithFunctionRaster(this.rasterFunction));else{let{url:s,rasterFunction:i,source:a}=this;if(!s&&!a)throw new m("imagery-tile-layer:open","missing url or source parameter");a?yield this._openFromSource(a,e):i?yield this._openFromUrlWithRasterFunction(s,i,e):yield this._openFromUrl(s,e)}let r=this.raster.rasterInfo;if(!r)throw new m("imagery-tile-layer:load","cannot load resources on "+this.url);if(this._set("serviceRasterInfo",t?r:this._primaryRasters[0].rasterInfo),this._set("spatialReference",r.spatialReference),this.sourceJSON=this.sourceJSON||this.raster.sourceJSON,this.sourceJSON!=null){let s=this.raster.tileType==="Map"&&this.sourceJSON.minLOD!=null&&this.sourceJSON.maxLOD!=null?this.sourceJSON:u(c({},this.sourceJSON),{minScale:0,maxScale:0});this.read(s,{origin:"service"})}else this.read({tileInfo:this.serviceRasterInfo?.storageInfo.tileInfo.toJSON()},{origin:"service"});this.title||(this.title=this.raster.datasetName),this.raster.tileType==="Map"&&(this.popupEnabled=!1),this._configDefaultSettings(),this.addHandles(_(()=>this.customParameters,s=>{this.raster&&(this.raster.ioConfig.customFetchParameters=s)}))})}_openFromRaster(e,t){return p(this,null,function*(){e.rasterInfo||(yield e.open({signal:t})),this._primaryRasters=e.datasetFormat==="Function"?e.primaryRasters.rasters:[e],this.url||(this.url=this._primaryRasters[0].url)})}_openFromUrlWithRasterFunction(e,t,r){return p(this,null,function*(){let s=[e];t&&A(t.toJSON(),s);let i=yield Promise.all(s.map(h=>y.open({url:h,sourceJSON:this.sourceJSON,ioConfig:u(c({sampling:"closest"},this.ioConfig),{customFetchParameters:this.customParameters}),signal:r}))),a=i.findIndex(h=>h==null);if(a>-1)throw new m("imagery-tile-layer:open",`cannot open raster: ${s[a]}`);return this._primaryRasters=i,this._initializeWithFunctionRaster(t)})}_openFromUrl(e,t){return p(this,null,function*(){let r=yield y.open({url:e,sourceJSON:this.sourceJSON,ioConfig:u(c({sampling:"closest"},this.ioConfig),{customFetchParameters:this.customParameters}),signal:t});if(r==null)throw new m("imagery-tile-layer:open",`cannot open raster: ${e}`);this._primaryRasters=[r],this.raster=r})}_openFromSource(e,t){return p(this,null,function*(){let r="the tiled imagery data source is not supported",s=e.type?.toLowerCase()==="coverage"?"CovJSON":e.extent&&e.pixelBlock?"MEMORY":null;if(!s)throw new m("imagery-tile-layer:open",r);s==="MEMORY"&&(e=u(c({},e),{pixelBlock:void 0,pixelBlocks:[e.pixelBlock]}));let i=yield y.open({url:"",source:e,datasetFormat:s,ioConfig:u(c({sampling:"closest"},this.ioConfig),{customFetchParameters:this.customParameters}),signal:t});if(i==null)throw new m("imagery-tile-layer:open",r);this._primaryRasters=[i],this.rasterFunction?yield this._initializeWithFunctionRaster(this.rasterFunction):this.raster=i})}_openFunctionRaster(e,t){return p(this,null,function*(){let r={raster:this._primaryRasters[0]};this._primaryRasters.length>1&&this._primaryRasters.forEach(a=>r[a.url]=a);let s=E(e.functionDefinition?.toJSON()??e.toJSON(),r),i=new H({rasterFunction:s});return yield i.open(t),i})}_initializeWithFunctionRaster(e,t){return p(this,null,function*(){try{this.raster=yield this._openFunctionRaster(e,t)}catch(r){r instanceof m&&f.getLogger(this).error("imagery-tile-layer:open",r.message),f.getLogger(this).warn("imagery-tile-layer:open","the raster function cannot be applied and is removed"),this._set("rasterFunction",null),this.raster=this._primaryRasters[0]}})}};n([l({clonable:!1})],o.prototype,"_primaryRasters",void 0),n([l(V)],o.prototype,"legendEnabled",void 0),n([l({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],o.prototype,"isReference",void 0),n([l({type:["show","hide"]})],o.prototype,"listMode",void 0),n([l({json:{read:!0,write:!0}})],o.prototype,"blendMode",void 0),n([l({type:v,json:{name:"renderingRule",write:!0}})],o.prototype,"rasterFunction",void 0),n([l()],o.prototype,"sourceJSON",void 0),n([l({readOnly:!0,json:{origins:{service:{read:{source:"currentVersion"}}}}})],o.prototype,"version",void 0),n([l({readOnly:!0,json:{read:!1}})],o.prototype,"type",void 0),n([l({type:["ArcGISTiledImageServiceLayer"]})],o.prototype,"operationalLayerType",void 0),n([l({type:Boolean,value:!0,json:{read:{source:"disablePopup",reader:(e,t)=>!t.disablePopup},write:{target:"disablePopup",overridePolicy(){return{enabled:!this.loaded||this.raster.tileType==="Raster"}},writer(e,t,r){t[r]=!e}}}})],o.prototype,"popupEnabled",void 0),n([l({type:N,json:{read:{source:"popupInfo"},write:{target:"popupInfo",overridePolicy(){return{enabled:!this.loaded||this.raster.tileType==="Raster"}}}}})],o.prototype,"popupTemplate",void 0),n([l({readOnly:!0})],o.prototype,"defaultPopupTemplate",null),n([l({readOnly:!0,type:[g]})],o.prototype,"fields",void 0),n([l({readOnly:!0,type:[g]})],o.prototype,"rasterFields",null),n([l({constructOnly:!0})],o.prototype,"source",void 0),o=n([S("esri.layers.ImageryTileLayer")],o);var Je=o;export{Je as a};
