import{h as l}from"./chunk-RNC4P66O.js";import"./chunk-7LHOQXZT.js";import"./chunk-BCREO4Q5.js";import"./chunk-KJUZWSCL.js";import"./chunk-3WO6D7MU.js";import"./chunk-BUZ3SPLE.js";import"./chunk-KVM6SHDX.js";import"./chunk-EQZWYK27.js";import"./chunk-ZQIC5NFT.js";import"./chunk-VIEK2X23.js";import"./chunk-XKIFGPJO.js";import"./chunk-PEW2PLAN.js";import"./chunk-Q6Y4JG7Q.js";import"./chunk-7F5DJLJT.js";import"./chunk-CX5IFQZJ.js";import{g as p}from"./chunk-NJWTSROP.js";import"./chunk-D3R25AF2.js";import"./chunk-ARRCN5K3.js";import"./chunk-G4DZJMGT.js";import"./chunk-X2B63YVS.js";import{a as o}from"./chunk-BAEF3CT6.js";import"./chunk-AUAZP44J.js";import"./chunk-PVDFCTA4.js";import"./chunk-KNVXE32P.js";import"./chunk-76ATOSLU.js";import{f as n}from"./chunk-CCJU4DSH.js";import{a as r}from"./chunk-QGVBCWUY.js";import"./chunk-MYO4NP2N.js";import{e as i}from"./chunk-NFIPKH6V.js";import"./chunk-JPU2PQZC.js";import{l as a}from"./chunk-5QEXLALV.js";import"./chunk-P6QFA5MM.js";import"./chunk-DGTD7Y73.js";import"./chunk-LI2SX4T6.js";import"./chunk-BWO7LS2H.js";import"./chunk-HEVQSRJ2.js";import"./chunk-OVHPPCBL.js";import"./chunk-SNFOAZZQ.js";import"./chunk-AML4XSEF.js";import"./chunk-4PTIEWMT.js";import"./chunk-TG2UTNEO.js";import"./chunk-YOFFGXOB.js";import"./chunk-XRGPJ3QY.js";import"./chunk-6MRUJ2UW.js";import"./chunk-2LI2GKBQ.js";import"./chunk-QBWJMFH5.js";import"./chunk-VTHXE323.js";var m=new o({preserveShape:"preserve-shape",planar:"planar",geodesic:"geodesic"}),y=new o({esriAcres:"acres",esriHectares:"hectares",esriSquareMiles:"square-miles",esriSquareKilometers:"square-kilometers",esriSquareMeters:"square-meters",esriSquareFeet:"square-feet",esriSquareYards:"square-yards",esriAres:"ares"}),h=new o({9001:"meters",9002:"feet",9036:"kilometers",9093:"miles",109012:"nautical-miles",109001:"yards"}),t=class extends n{constructor(e){super(e),this.areaUnit=null,this.calculationType=null,this.lengthUnit=null,this.polygons=null}toJSON(){let e={};if(this.polygons&&this.polygons.length>0){let s=this.polygons.map(u=>u.toJSON());e.polygons=JSON.stringify(s);let c=this.polygons[0].spatialReference;e.sr=p(c)}if(this.lengthUnit&&(e.lengthUnit=h.toJSON(this.lengthUnit)),this.areaUnit){let s=y.toJSON(this.areaUnit);e.areaUnit=typeof s=="string"?JSON.stringify({areaUnit:s}):s}return this.calculationType&&(e.calculationType=m.toJSON(this.calculationType)),e}};r([i({type:String,json:{write:!0}})],t.prototype,"areaUnit",void 0),r([i({type:String,json:{write:!0}})],t.prototype,"calculationType",void 0),r([i({type:String,json:{write:!0}})],t.prototype,"lengthUnit",void 0),r([i({type:[l],json:{write:!0}})],t.prototype,"polygons",void 0),t=r([a("esri.rest.support.AreasAndLengthsParameters")],t);var T=t;export{T as default};
